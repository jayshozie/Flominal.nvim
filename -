*Flominal.txt*                            A floating window terminal with tabs.

Author: Emir "Jayshozie" Baha Yıldırım <https://github.com/jayshozie>
License: MIT License (see |FlominalLicense|)

              ▄▄                             ▄▄                       ▄▄   ~
  ▀███▀▀▀███▀███                             ██                     ▀███   ~
    ██    ▀█  ██                                                      ██   ~
    ██   █    ██   ▄██▀██▄▀████████▄█████▄ ▀███ ▀████████▄  ▄█▀██▄    ██   ~
    ██▀▀██    ██  ██▀   ▀██ ██    ██    ██   ██   ██    ██ ██   ██    ██   ~
    ██   █    ██  ██     ██ ██    ██    ██   ██   ██    ██  ▄█████    ██   ~
    ██        ██  ██▄   ▄██ ██    ██    ██   ██   ██    ██ ██   ██    ██   ~
  ▄████▄    ▄████▄ ▀█████▀▄████  ████  ████▄████▄████  ████▄████▀██▄▄████▄ ~

				   Flominal ~
			       Over-Engineered
				 Multi-Tabbed
				 Easy-to-Use
			    Absolutely Unnecessary
		       Floating Window Terminal Plugin.

==============================================================================
CONTENTS                                                   *Flominal-contents*

    01. Introduction ............................. |FlominalIntro|
    02. Usage .................................... |FlominalUsage|
    03. Setup .................................... |FlominalSetup|
    04. Keymaps .................................. |FlominalKeymaps|
    05. Options .................................. |FlominalOptions|
	a. Flominal .............................. |FlominalOptionsFlominal|
        b. Commands .............................. |FlominalOptionsCommands|
        c. Keymaps ............................... |FlominalOptionsKeymaps|
    06. Functions ................................ |FlominalFunctions|
    07. License .................................. |FlominalLicense|
    08. Bugs ..................................... |FlominalBugs|
    09. Contributing ............................. |FlominalContributing|
    10. Changelog ................................ |FlominalChangelog|

==============================================================================
01. Introduction                                               *FlominalIntro*

Flominal is a floating window terminal with tabs. It is designed to be simple
and easy to use. It is NOT a terminal emulator. It uses the built-in vim.cmd()
command to create terminal in separate buffers. Flominal does not have any
external dependencies. It is written in pure Lua.

==============================================================================
02. Usage                                                      *FlominalUsage*

To use Flominal, you need to have Neovim 0.7.0 or higher. It may not be as
stable in Windows as it is on Linux machines, didn't test it.

There are a lot of commands, but they are as optional as unnecessary. You can
(and in my opinion should) use their corresponding keymaps, since you would
use this plugin to get some terminal stuff faster, generally. I won't get into
the keymaps in this section, you can check them out in the *FlominalMappings*
section.

`:Flominal` is the entry point to the plugin. You can use `:Flominal toggle`
too, if you want. It will show two floating windows, one is your terminal, and
the other is your tab bar. It automatically goes into `TERMINAL` mode every
time you toggle Flominal. Every other functionality you use, will be done by
adding the function right after the main command. For example to create a new
tab, you can use:
>
    :Flominal new_tab
<
You can rename tabs, which renames the buffer too, with:
>
    :Flominal rename_tab
<
If you want to switch tabs you can use one of the following:
>
    :Flominal switch_tab
    :Flominal next_tab
    :Flominal prev_tab
<
What `:Flominal next_tab` and `:Flominal prev_tab` does is pretty
straightforward, they open the next/previous tab. If you are at the last or
first tab, and you used these commands, respectively, you would be in your
first/last tab, respectively. What `:Flominal switch_tab` does is that it asks
for the name or bufnr of the buffer you'd like to switch. If you didn't change
the names of your tabs, I believe this is a good time to do that, because this
function is a bit problematic if there are multiple tabs with the same name.

If your terminal has crashed, and you want to get rid of that tab you can just
close that tab with:
>
    :Flominal close_tab
<
Plugin crashed? First of all, please open up an issue, so that I can look into
it, but after you do that, you can clear all buffers with this:
>
    :Flominal cleanup
<
And that's all of them. It may be a bit overwhelming or you might think, "That
was it?", either way I think you should check their corresponding keymaps in
*FlominalKeymaps*.

==============================================================================
03. Setup                                                      *FlominalSetup*

Best way to setup Flominal is to use a package manager. Under this paragraph
you can find an example setup using lazy.nvim; however, it is almost same with
any other plugin manager of your choosing. Everything there is to know about
them, can be found in |FlominalOptions|.
>lua
-- lazy/Flominal.lua
return {
    "jayshozie/Flominal.nvim",

    -- To use the legacy version, you can set this to "legacy"
    branch = "main", 

    opts = {
        Flominal = {
            width = 0.8,
            height = 0.8,
            border = "rounded",
            title = "Flominal",
            tab_name_length = 25,

            -- These configure the floating window of
            -- Flominal, and its tabline.
        },
        commands = {
            toggle = "Flominal",
            new_tab = "Flominal new_tab",
            rename_tab = "Flominal rename_tab",
            switch_tab = "Flominal switch_tab",
            next_tab = "Flominal next_tab",
            prev_tab = "Flominal prev_tab",
            close_tab = "Flominal close_tab",
            cleanup = "Flominal cleanup",

            -- If you don't want to use the keymaps and
            -- want to use the commands instead, you can
            -- shorten the commands by using this list.
        },
        keymaps = {
            -- If you want to use the default of a
            -- keymap don't include it in your config.

            k_toggle = "<M-f>",
            k_new_tab = "<M-F>",
            k_rename_tab = "<M-r>",
            k_switch_tab = "<M-g>",
            k_next_tab = "<M-p>",
            k_prev_tab = "<M-o>",
            k_close_tab = "<M-c>",
            k_cleanup = "<M-C>",

            -- All keymap variables start with `k_`, and
            -- then the name of the function/command.
        },
    },
}

==============================================================================
04. Mappings                                                 *FlominalKeymaps* 

I will give you a table of default keymaps corresponding to the commands in
the previous section. These keymaps are designed for dvorak in mind, if you
are using any other keyboard layout, these may not be the most optimal
selection for you, you can change these in your configuration.

        CMD .......................... KEYMAP ~
`:Flominal` or `:Flominal toggle` ........ <M-n> ~
`:Flominal new_tab` .................... <M-N> ~
`:Flominal rename_tab` ................. <M-r> ~
`:Flominal switch_tab` ................. <M-g> ~
`:Flominal next_tab` ................... <M-u> ~
`:Flominal prev_tab` ................... <M-e> ~
`:Flominal close_tab` .................. <M-c> ~
`:Flominal cleanup` .................... <M-C> ~

If you want to change these, which I think you do, here is an example of how
you can do that (this is for lazy.nvim, but it would be almost exactly the
same with any other package manager):

==============================================================================
05. Options                                                  *FlominalOptions*

These are the options you can change in your configuration file.

a. Flominal                                        *FlominalOptionsFlominal* ~

These change how your Flominal looks like.

					       *FlominalOptionsFlominal.width*
width ~
    This configures the default width of the floating window of the terminal.
    This is the same as the built-in 'winheight' option. It's value represents
    the percentage of your screen which the floating window of Flominal will
    occupy, and should be between 0.0 and 1.0.

    Default : 0.6

					      *FlominalOptionsFlominal.height*
height ~
    This configures the default height of the floating window of the terminal.
    This is the same as the built-in winheight option. It's value represents
    the percentage of your screen which the floating window of Flominal will
    occupy, and should be between 0.0 and 1.0.

    Default : 0.6

					      *FlominalOptionsFlominal.border*
border ~
    This configures the default border type of the floating window of both the
    tabline window and the terminal. This is the same as the built-in
    winborder option.

    Available optoins are:
    - "rounded" (default)
    - "double"
    - "single"
    - "solid"
    - "none"

					       *FlominalOptionsFlominal.title*
title ~
    This configures the default title of the floating window of the terminal.
    This is the same as the built-in titlestring option.
    The value should be a string. 

    Default : "Flominal"

				     *FlominalOptionsFlominal.tab_name_length*
tab_name_length ~
    This configures the default length of the tab names shown in the tabline.
    The value should be an integer. If the length of the tab name is greater
    than this value, it will be truncated to this length.

    Default : 20

b. Commands                                        *FlominalOptionsCommands* ~

These are the commands you can change in your configuration file. You can
change these to shorten the commands you use. For example, if you want to
change the command for `:Flominal new_tab` to `:Flominal nt`, you can do
that by changing the value of `new_tab` to `nt`. You can also change the
main starting point `Flominal`.

					      *FlominalOptionsCommands.toggle*
toggle ~

    This configures the command used to toggle the floating window of Flominal.
    The value should be a string.
    
    Default : `Flominal` OR `Flominal toggle`

					     *FlominalOptionsCommands.new_tab*
new_tab ~
    
    This configures the command used to create a new tab. The value should be a
    string.

    Default : `new_tab`

					  *FlominalOptionsCommands.rename_tab*
rename_tab ~

    This configures the command used to rename the open tab. The value should
    be a string.

    Default : `rename_tab`

					  *FlominalOptionsCommands.switch_tab*
switch_tab ~

    This configures the command used to switch to a tab. The value should be a
    string.

    Default : `switch_tab`

					    *FlominalOptionsCommands.next_tab*
next_tab ~

    This configures the command used to switch to the next tab. The value
    should be a string.

    Default : `next_tab`

					    *FlominalOptionsCommands.prev_tab*
prev_tab ~

    This configures the command used to switch to the previous tab. The value
    should be a string.

    Default : `prev_tab`

					   *FlominalOptionsCommands.close_tab*
close_tab ~

    This configures the command used to close the tab. The value should be a
    string.

    Default : `close_tab`

					     *FlominalOptionsCommands.cleanup*
cleanup ~

    This configures the command used to cleanup the tab. The value should be a
    string.

    Default : `cleanup`

5.3 Keymaps                                         *FlominalOptionsKeymaps* ~

These are the keymaps you can set to better interact with Flominal. They come
with dvorak-aligned defaults. To change them, see |FlominalSetup|.

					     *FlominalOptionsKeymaps.k_toggle*
k_toggle ~
    This configures the keymap used to toggle the floating window of Flominal.
    The value should be a keymap.

    Default : <M-n>

					     *FlominalOptionsKeymaps.k_toggle*
k_new_tab ~
    This configures the keymap used to create a new tab. The value should be a
    keymap.

    Default : <M-N>

					 *FLominalOptionsKeymaps.k_rename_tab*
k_rename_tab ~
    This configures the keymap used to rename the open tab. The value should be
    a keymap.

    Default : <M-r>

					 *FlominalOptionsKeymaps.k_switch_tab*
k_switch_tab ~
    This configures the keymap used to switch tabs. The value should be a
    keymap.

    Default : <M-g>

					    *FlominalOptionsKeymaps.k_next_tab
k_next_tab ~
    This configures the keymap used to switch to the next tab. The value
    should be a keymap.

    Default : <M-u>

					   *FlominalOptionsKeymaps.k_prev_tab*
k_prev_tab ~
    This configures the keymap used to switch to the previous tab. The value
    should be a keymap.

    Default : <M-e>

					  *FlominalOptionsKeymaps.k_close_tab*
k_close_tab ~
    This configures the keymap used to close the current tab. The value should
    be a keymap.

    Default : <M-c>

					    *FlominalOptionsKeymaps.k_cleanup*
k_cleanup ~
    This configures the keymap used to cleanup the Flominal buffers, windows
    and plugin's own lists that keep the values of those. The value should be
    a keymap.

    Default : <M-C>

==============================================================================
06. Functions                                              *FlominalFunctions*

These explain how the functions you call when you interact with Flominal work.

open({term_buf}, {tabs_buf})                      *FlominalFunctions.open()* ~
    Handles creating buffers and windows for the tabline and individual
    terminals.
    - Notes:
      - This function should not be used for toggling Flominal.
      - It does not check whether those windows are open or not.
      - Check |FlominalFunctions.toggle()| for more info.

    Parameters : ~
	{term_buf} (number)  A terminal bufnr (optional)
	{tabs_buf} (number)  The tabline bufnr (optional)

    Returns : ~
	{term_buf} (number)  Either the argument itself, or a new bufnr
	{term_win} (number)  WinID of the created terminal
	{tabs_buf} (number)  Either the argument itself, or a new bufnr
	{tabs_win} (number)  WinID of the tabline floating window

					       *FlominalFunctions.init_tabs()*
init_tabs({win}) ~
    Initiates the tabline in the winid provided in {win}.

    Parameters : ~
	{win} (number) WinID of the tabline

					   *FlominalFunctions.init_terminal()*
init_terminal({win},{buf}) ~
    Sets the window to terminal, if it already isn't, and puts it into
    Terminal-mode.

    Parameters : ~
	{win} (number) WinID of the terminal window
	{buf} (number) Bufnr of the terminal buffer

					      *FlominalFunctions.rename_tab()*
rename_tab({buf_to_rename}) ~
    Changes the buffer name of the buffer. If the argument is empty or nil
    does not rename it to `''` or `nil` and warns the user.

    Parameters : ~
	{buf_to_rename} (number) Bufnr of the terminal buffer

						  *FlominalFunctions.toggle()*
toggle() ~
    Checks whether the tabline and a terminal is on the screen. If they are
    hides them. Else calls |FlominalFunctions.open()| accordingly.

						 *FlominalFunctions.new_tab()*
new_tab() ~
    Creates a new buffer, sets the term_current var to the new bufnr, hides
    all windows, calls |FlominalFunctions.open()|, sets current window to the
    newly created window, calls |FlominalFunctions.init_terminal()| and
    |FlominalFunctions.init_tabs().

					      *FlominalFunctions.switch_tab()|
switch_tab({buf_name_to_switch}) ~
    Checks if the argument is `''`, `nil`, (number) or (string); if it is
    (number), sets local {buf_to_switch} to the argument, if it is (string)
    then iterates through the {all_term} list, checks their names, compares
    the string that comes after the last slash in the name to that string, if
    they match, switches to that switches to that buffer. Asks input if the
    argument is `''` or `nil`, same procedure occurs.

    Parameters : ~
	{buf_name_to_switch} (string, number) Name or the bufnr of the tab the
	                                      user wants to switch to.
					      (optional)

						*FlominalFunctions.next_tab()*
next_tab() ~
    Calls |FlominalFunctions.switch()| with the bufnr of the next tab in the
    {all_term} list, circles back if the term_current is the last tab in the
    {all_term} list. Requires the existence of multiple tabs.

						*FlominalFunctions.prev_tab()*
prev_tab() ~
    Calls |FlominalFunctions.switch()| with the bufnr of the previous tab in
    the {all_term} list, circles back if the term_current is the first tab in
    the {all_term} list. Requires the existence of multiple tabs.

==============================================================================
License

MIT License
Copyright (c) 2025 Emir Baha Yıldırım
See LICENSE file for details.

vim:tw=78:ts=8:noet:ft=help:norl:


